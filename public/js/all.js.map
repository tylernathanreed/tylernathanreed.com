{"version":3,"sources":["game-of-life.js"],"names":[],"mappingsfile":"all.js","sourcesContent":["var board = [];\r\nvar width = 70;\r\nvar height = 50;\r\nvar cells = width * height;\r\nvar running = 0;\r\nvar delay = 50;\r\nvar generation = 0;\r\nvar ReactCell;\r\n\r\n$(document).ready(function() {\r\n\t$(\".gen\").text(\"0\");\r\n\t$(\".population\").text(\"0\");\r\n\tclearBoard();\r\n\tinitialSet();\r\n\tcreateBoard();\r\n\tactivateBoard();\r\n\trunning = 1;\r\n\trunIt();\r\n});\r\n\r\n\r\nfunction clearBoard() {\r\n\tboard = [];\r\n\r\n\tfor(var i = 0; i < (cells); i++)\r\n\t\tboard[i] = {id: i, status: \"cell dead\"};\r\n\r\n\tgeneration = 0;\r\n\t$(\".gen\").text(\"0\");\r\n};\r\n\r\n\r\nfunction createBoard() {\r\n\t$('#container').empty();\r\n\r\n\tReactCell = React.createClass({\r\n\t\t\r\n\t\tgetInitialState: function() {\r\n\t\t\t//sets the initial state to the contents of the board variable\r\n\t\t\treturn {cellBoard: board};\r\n\t\t},\r\n\t\tcomponentDidMount: function() {\r\n\t\t\t//componentDidMount is called when the component is rendered. This can\r\n\t\t\t//be uncommented so that repeated drawBoard() calls are not required.\r\n\t\t\t\r\n\t\t\t//this.timer = setInterval(this.updateCells, delay);\r\n\t\t},\r\n\t\t//componentWillUnmount is called if the component is closed\r\n\t\tcomponentWillUnmount: function() {\r\n\t\t\t//clearInterval(this.timer);\r\n\t\t},\r\n\t\tupdateCells: function() {\r\n\t\t\tthis.setState({cellBoard: this.props.board});\r\n\t\t},\r\n\t\trender: function() {\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{this.props.board.map(function(cell, i) {\r\n\t\t\t\t\t\treturn(<div className={cell.status} key={i} id={i}></div>);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t    }\r\n\t});\r\n\t\t\r\n\tdrawBoard();\r\n\r\n}\r\n\r\nfunction runGeneration() {\r\n\r\n\tvar newBoard = [];\r\n\r\n\tvar cellStatus = '';\r\n\r\n\tfor (var i = 0; i < (cells); i++) {\r\n\r\n\t\tnewBoard.push({id: i, status: \"cell dead\"});\r\n\r\n\t\tvar check = cellCheck(i);\r\n\r\n\t\t//keeps the living cell alive if it has 2 or 3 living neighbors\r\n\t\tif ((board[i].status == \"cell alive\" || board[i].status == \"cell alive old\") && (check == 3 || check == 2)) {\r\n\t\t\tnewBoard[i] = {id: i, status: \"cell alive old\"};\r\n\t\t}\r\n\t\t//brings the dead cell to life if there are exactly 3 neighbors\r\n\t\tif (board[i].status == \"cell dead\" && check == 3) {\r\n\t\t\tnewBoard[i] = {id: i, status: \"cell alive\"};\r\n\t\t}\r\n\r\n\t};\r\n\t\r\n\t//check to see if all of the cells are dead.  Stops the run.\r\n\tfor (var i = 0; i < cells; i++) {\r\n\t\tif (board[i].status == \"cell alive\" || board[i].status == \"cell alive old\") {break;}\r\n\t\tif (i == cells - 1) {\r\n\t\t\t//alert(\"They're all dead! Reseting.  :)\");\r\n      $('.clear').addClass('activeButton');\r\n      setTimeout(function() {\r\n        $('.clear').removeClass('activeButton');\r\n      }, 400);\r\n\t\t\trunning = 0;\r\n\t\t\tclearBoard();\r\n\t\t\tdrawBoard();\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn newBoard;\r\n};\r\n\r\n\r\nfunction drawBoard(passedBoard) {\r\n\tReactDOM.render(<ReactCell board={board} generation={generation}/>, document.getElementById('container'));\r\n};\r\n\r\n\r\nfunction activateBoard() {\r\n\t$('.cell').click(function() {\r\n\t\tvar cellNum = $(this).attr('id');\r\n\t\tif (board[cellNum].status == \"cell alive\" || board[cellNum].status == \"cell alive old\") {\r\n\t\t\tboard[cellNum].status = \"cell dead\";\r\n\t\t} else {\r\n\t\t\tboard[cellNum].status = \"cell alive\";\r\n\t\t}\r\n\t\tdrawBoard();\r\n\t\tconsole.log(cellNum + \" \" + board[cellNum].status);\r\n\t})\r\n\r\n\t$('.clear').click(function() {\r\n\t\t$('.stop').removeClass('activeButton');\r\n\t\t$('.clear').addClass('activeButton');\r\n\t\tsetTimeout(function() {\r\n\t\t\t$('.clear').removeClass('activeButton');\r\n\t\t}, 700);\r\n\t\trunning = 0;\r\n\t\tgeneration = 0;\r\n\t\tclearBoard();\r\n\t\tdrawBoard();\r\n\t\t$(\".gen\").text('0');\r\n\t\t$(\".population\").text('0');\r\n\t});\r\n\r\n\t$('.run').click(function() {\r\n\t\t$('.stop').removeClass('activeButton');\r\n\t\t$('.reset').removeClass('activeButton');\r\n\t\t$('.run').addClass('activeButton');\r\n\t\tsetTimeout(function() {\r\n\t\t\t$('.run').removeClass('activeButton');\r\n\t\t}, 700);\r\n\t\trunning = 1;\r\n\t\trunIt();\r\n\t});\r\n\r\n\t$('.stop').click(function() {\r\n\t\t$('.stop').addClass('activeButton');\r\n\t\trunning = 0;\r\n\t});\r\n\r\n\t$('.50').click(function() {\r\n\t\trunning = 0;\r\n\t\twidth = 50;\r\n\t\theight = 30;\r\n\t\tcells = width * height;\r\n\t\tclearBoard();\r\n\t\tcreateBoard();\r\n\t\t$('.70').removeClass('activeButton');\r\n\t\t$('.100').removeClass('activeButton');\r\n\t\t$('.50').addClass('activeButton');\r\n\t\t$('.cell:nth-child(70n + 1)').css(\"clear\", \"none\");\r\n\t\t$('.cell:nth-child(100n + 1)').css(\"clear\", \"none\");\r\n\t\t$('.cell:nth-child(50n + 1)').css(\"clear\", \"both\");\r\n\t\t$('.cell').css({\"width\":\"12px\",\"height\":\"12px\"})\r\n\t\t$('#container').css({\"width\": \"650px\", \"height\": \"390px\"});\r\n\t\tremoveListeners();\t\r\n\t\tactivateBoard();\r\n\t\tconsole.log(\"w: \" + width + \" h: \" + height);\r\n\t});\r\n\t$('.70').click(function() {\r\n\t\trunning = 0;\r\n\t\twidth = 70;\r\n\t\theight = 50;\r\n\t\tcells = width * height;\r\n\t\tclearBoard();\r\n\t\tcreateBoard(board);\r\n\t\t$('.50').removeClass('activeButton');\r\n\t\t$('.100').removeClass('activeButton');\r\n\t\t$('.70').addClass('activeButton');\r\n\t\t$('.cell:nth-child(100n + 1)').css(\"clear\", \"none\");\r\n\t\t$('.cell:nth-child(50n + 1)').css(\"clear\", \"none\");\r\n\t\t$('.cell:nth-child(70n + 1)').css(\"clear\", \"both\");\r\n\t\t$('.cell').css({\"width\":\"11px\",\"height\":\"11px\"})\r\n\t\t$('#container').css({\"width\": \"840px\", \"height\": \"600px\"});\r\n\t\tremoveListeners();\t\t\r\n\t\tactivateBoard();\r\n\t\tconsole.log(\"w: \" + width + \" h: \" + height);\r\n\t});\r\n\t$('.100').click(function() {\r\n\t\trunning = 0;\r\n\t\twidth = 100;\r\n\t\theight = 80;\r\n\t\tcells = width * height;\r\n\t\tclearBoard();\r\n\t\tcreateBoard(board);\r\n\t\t$('.50').removeClass('activeButton');\r\n\t\t$('.70').removeClass('activeButton');\r\n\t\t$('.100').addClass('activeButton');\r\n\t\t$('.cell:nth-child(50n + 1)').css(\"clear\", \"none\");\r\n\t\t$('.cell:nth-child(70n + 1)').css(\"clear\", \"none\");\r\n\t\t$('.cell:nth-child(100n + 1)').css(\"clear\", \"both\");\r\n\t\t$('.cell').css({\"width\":\"8px\",\"height\":\"8px\"})\r\n\t\t$('#container').css({\"width\": \"900\", \"height\": \"720\"});\r\n\t\tremoveListeners();\r\n\t\tactivateBoard();\r\n\t\tconsole.log(\"w: \" + width + \" h: \" + height);\r\n\t});\r\n\t$('.slow').click(function() {\r\n\t\tdelay = 200;\r\n\t\t$('.medium').removeClass('activeButton');\r\n\t\t$('.fast').removeClass('activeButton');\r\n\t\t$('.slow').addClass('activeButton');\r\n\t});\r\n\t$('.medium').click(function() {\r\n\t\tdelay = 110;\r\n\t\t$('.slow').removeClass('activeButton');\r\n\t\t$('.fast').removeClass('activeButton');\r\n\t\t$('.medium').addClass('activeButton');\r\n\t});\r\n\t$('.fast').click(function() {\r\n\t\tdelay = 50;\r\n\t\t$('.slow').removeClass('activeButton');\r\n\t\t$('.medium').removeClass('activeButton');\r\n\t\t$('.fast').addClass('activeButton');\r\n\t});\r\n};\r\n\r\nfunction removeListeners() {\r\n\t$('.50').off();\r\n\t$('.70').off();\r\n\t$('.100').off();\r\n\t$('.run').off();\r\n\t$('.reset').off();\r\n\t$('.stop').off();\r\n\t$('.cell').off();\r\n\t$('.slow').off();\r\n\t$('.medium').off();\r\n\t$('.fast').off();\r\n};\r\n\r\nfunction runIt() {\r\n\tif (running == 1) {\r\n\t\tsetTimeout(function() {\r\n      generation++;\r\n\t\t\tboard = runGeneration();\r\n\t\t\t$(\".gen\").text(generation);\r\n\t\t\tsetTimeout(function() {\r\n\t\t\t\tdrawBoard();\r\n\t\t\t\trunIt();\r\n\t\t\t},delay);\r\n\t\t},0);\r\n\t}\r\n};\r\n\r\n\r\nfunction cellCheck(i) {\r\n\r\n\tvar count = 0;\r\n\tvar borderCell = 0;\r\n\t//checks wrap-around for the top row going upward to the bottom\r\n\tif (i >= 0 && i <= (width - 1)) {\r\n\t\tborderCell = 1;\r\n\t\tvar dif = width - i;\r\n\t\t//console.log('i:' + i + ' dif:' + dif + ' cell:' + (cells - dif));\r\n\t\tif (board[cells - dif].status == \"cell alive\"  || board[cells - dif].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 1 high center one for: ' + i + ' cell: ' + (cells - dif));\r\n\t\t}\r\n\t\tif (i != 0 && (board[cells - dif - 1].status == \"cell alive\" || board[cells - dif - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 1 high left one for: ' + i + ' cell: ' + (cells - dif - 1));\r\n\t\t}\r\n\t\tif (i != (width - 1) && (board[cells - dif + 1].status == \"cell alive\" || board[cells - dif + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 1 high right one for: ' + i + ' cell: ' + (cells - dif + 1));\r\n\t\t}\r\n\t\t//normal checks, not involving wrap-arounds\r\n\t\tif (i != 0 && (board[i + width - 1].status == \"cell alive\" || board[i + width - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 1 low left one for: ' + i + ' cell: ' + (i + width - 1));\r\n\t\t}\r\n\t\tif (board[i + width].status == \"cell alive\" || board[i + width].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 1 low center one for: ' + i + ' cell: ' + (i + width));\r\n\t\t}\r\n\t\tif (i != (width - 1) && (board[i + width + 1].status == \"cell alive\" || board[i + width + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 1 low right one for: ' + i + ' cell: ' + (i + width + 1));\r\n\t\t}\r\n\t\tif (i != 0 && (board[i - 1].status == \"cell alive\" || board[i - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 1 left one for: ' + i + ' cell: ' + (i - 1));\r\n\t\t}\r\n\t\tif (i != (width - 1) && (board[i + 1].status == \"cell alive\" || board[i + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 1 right right one for: ' + i + ' cell: ' + (i + 1));\r\n\t\t}\r\n\t}\r\n\t//checks wrap-around for the bottom row going down to the top row\r\n\tif (i >= (cells - width) && i <= (cells - 1)) {\r\n\t\tborderCell = 1;\r\n\t\tvar dif = i + width - cells;\r\n\t\t//console.log('i:' + i + ' dif:' + dif + ' cell:' + (cells - dif));\r\n\t\tif (board[dif].status == \"cell alive\" \r\n\t\t\t|| board[dif].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 2 low center one for: ' + i + ' cell: ' + (cells - dif));\r\n\t\t}\r\n\t\tif (i != (cells - width) && (board[dif - 1].status == \"cell alive\" \r\n\t\t\t|| board[dif - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 2 low left one for: ' + i + ' cell: ' + (cells - dif - 1));\r\n\t\t}\r\n\t\tif (i != (cells - 1) && (board[dif + 1].status == \"cell alive\" \r\n\t\t\t|| board[dif + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 2 low right one for: ' + i + ' cell: ' + (cells - dif + 1));\r\n\t\t}\r\n\t\t//normal checks, not involving wrap-arounds\r\n\t\tif (i != (cells - width) && (board[i - width - 1].status == \"cell alive\" \r\n\t\t\t|| board[i - width - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 2 high left for: ' + i + ' cell: ' + (i - width - 1));\r\n\t\t}\r\n\t\tif (board[i - width].status == \"cell alive\" \r\n\t\t\t|| board[i - width].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 2 high center for: ' + i + ' cell: ' + (i + width));\r\n\t\t}\r\n\t\tif (i != (cells - 1) && (board[i - width + 1].status == \"cell alive\" \r\n\t\t\t|| board[i - width + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 2 high right for: ' + i + ' cell: ' + (i - width - 1));\r\n\t\t}\r\n\t\tif (i != (cells - width) && (board[i - 1].status == \"cell alive\" \r\n\t\t\t|| board[i - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 2 left for: ' + i + ' cell: ' + (i - 1));\r\n\t\t}\r\n\t\tif (i != (cells - 1) && (board[i + 1].status == \"cell alive\" \r\n\t\t\t|| board[i + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 2 right for: ' + i + ' cell: ' + (i + 1));\r\n\t\t}\r\n\r\n\t}\r\n\t//checks for cells on the right border (wraping around to left)\r\n\tif (((i + 1) % width) == 0) {\r\n\t\tborderCell = 1;\r\n\r\n\t\t//to the 'immediate right' with wrap-around\r\n\t\tif (board[i - width + 1].status == \"cell alive\" \r\n\t\t\t|| board[i - width + 1].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 right for: ' + i + ' cell: ' + (i - width + 1));\r\n\t\t}\r\n\t\t//to the 'lower right' with wrap-around\r\n\t\tif (i != (cells - 1) && (board[i + 1].status == \"cell alive\" \r\n\t\t\t|| board[i + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 lower right: ' + i + ' cell: ' + (i + 1));\r\n\t\t}\r\n\t\t//to the 'lower right' with wrap-around for the last cell\r\n\t\tif (i == (cells - 1) && (board[0].status == \"cell alive\" \r\n\t\t\t|| board[0].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 lower right for last cell: ' + i + ' cell: 0');\r\n\t\t}\r\n\t\t//to the 'upper right' with wrap-around for all but the cell\r\n\t\t//in the upper right\r\n\t\tif (i > width && (board[i - (2 * width) + 1].status == \"cell alive\" \r\n\t\t\t|| board[i - (2 * width) + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 upper right: ' + i + ' cell: ' + (i - (2 * width) + 1));\r\n\t\t}\r\n\t\t//to the 'upper right' with wrap-around for the\r\n\t\t//cell in the upper right\r\n\t\tif (i == width - 1 && (board[(cells - width)].status == \"cell alive\" \r\n\t\t\t|| board[(cells - width)].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 highdiag one for upper right cell: ' + i + ' cell: ' + (cells + 1 - width));\r\n\t\t}\r\n\r\n\t\t//normal checks for normal cells that don't wrap around\r\n\r\n\t\t//checks for the cell directly above (non-wrapping)\r\n\t\tif (i != (width - 1) && i != (cells - 1) && (board[i - width].status == \"cell alive\" \r\n\t\t\t|| board[i - width].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 center top for: ' + i + ' cell: ' + (i - width));\r\n\t\t}\r\n\t\t//checks for the cell directly below (non-wrapping)\r\n\t\tif (i != (cells - 1) && i != (width - 1) && (board[i + width].status == \"cell alive\" \r\n\t\t\t|| board[i + width].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 center bottom for: ' + i + ' cell: ' + (i + width));\r\n\t\t}\r\n\t\tif (i != (cells - 1) && i != (width - 1) && (board[i + width - 1].status == \"cell alive\" \r\n\t\t\t|| board[i + width - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 lower left: ' + i + ' cell: ' + (i + width - 1));\r\n\t\t}\r\n\t\tif (i != (cells - 1) && i != (width - 1) && (board[i - 1].status == \"cell alive\" \r\n\t\t\t|| board[i - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 left: ' + i + ' cell: ' + (i - 1));\r\n\t\t}\r\n\t\tif (i != (width - 1) && i != (cells - 1) && (board[i - width - 1].status == \"cell alive\" \r\n\t\t\t|| board[i - width - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 upper left: ' + i + ' cell: ' + (i - width - 1));\r\n\t\t}\r\n\t\tif (i == (width - 1) && (board[cells - width - 1].status == \"cell alive\" \r\n\t\t\t|| board[cells - width - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 3 upper left for top left cell: ' + i + ' cell: ' + (i + width - 1));\r\n\t\t}\r\n\r\n\t}\r\n\t//checks for cells on the left border (wraping around to right)\r\n\tif (((i) % width) == 0 || i == 0) {\r\n\t\tborderCell = 1;\r\n\r\n\t\t//to the 'immediate left' with wrap-around\r\n\t\tif (board[i + width - 1].status == \"cell alive\" \r\n\t\t\t|| board[i + width - 1].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 4 left one for: ' + i + ' cell: ' + (i + width - 1));\r\n\t\t}\r\n\t\t//to the 'lower left' with wrap-around for all but lowest left cell\r\n\t\tif (i != (cells - width) && (board[i + (width * 2) - 1].status == \"cell alive\" \r\n\t\t\t|| board[i + (width * 2) - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 4 lower left one for: ' + i + ' cell: ' + (i + (width * 2) - 1));\r\n\t\t}\r\n\t\t//to the 'lower right' with wrap-around for the low left cell\r\n\t\tif (i == (cells - width) && (board[width - 1].status == \"cell alive\" \r\n\t\t\t|| board[width - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 4 low left one for lowest left cell: ' + i + ' cell: ' + (width - 1));\r\n\t\t}\r\n\t\t//to the 'upper left' with wrap-around for all but the cell in the upper left\r\n\t\tif (i >= width && (board[i - 1].status == \"cell alive\" \r\n\t\t\t|| board[i - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 4 highleft one for: ' + i + ' cell: ' + (i - 1));\r\n\t\t}\r\n\t\t//to the 'upper left' with wrap-around for the cell in the upper left\r\n\t\tif (i == 0 && (board[cells - 1].status == \"cell alive\" \r\n\t\t\t|| board[cells - 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 4 highleft one for upper left cell: ' + i + ' cell: ' + (cells - 1));\r\n\t\t}\r\n\r\n\t\t//normal checks for normal cells that don't wrap around\r\n\r\n\t\t//checks for the cell directly above (non-wrapping)\r\n\t\tif (i != (width + 1) && i != (cells - width) && i != 0 && (board[i - width].status == \"cell alive\" \r\n\t\t\t|| board[i - width].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 4 center top for: ' + i + ' cell: ' + (i - width));\r\n\t\t}\r\n\t\t//checks for the cell directly below (non-wrapping) for all but cell 0\r\n\t\t//or the lower left cell\r\n\t\tif (i < (cells - width) && i != 0 && (board[i + width].status == \"cell alive\" \r\n\t\t\t|| board[i + width].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 4 center bottom for: ' + i + ' cell: ' + (i + width));\r\n\t\t}\r\n\t\t//checks for the cell to the upper right (non-wrapping) for all but cell 0\r\n\t\t//or the lower left cell\r\n\t\tif (i != 0 && i != (cells - width) && (board[i - width + 1].status == \"cell alive\" \r\n\t\t\t|| board[i - width + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 4 upper right for: ' + i + ' cell: ' + (i - width + 1));\r\n\t\t}\r\n\t\t//checks for the cell to the immediate right (non-wrapping)\r\n\t\tif (i != 0 && i != (cells - width) && (board[i + 1].status == \"cell alive\" \r\n\t\t\t|| board[i + 1].status == \"cell alive old\")) {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' 4 right for: ' + i + ' cell: ' + (i + 1));\r\n\t\t}\r\n\t\t//checks for the cell to the lower right (non-wrapping) for all\r\n\t\t//but lower left cell and cell 0\r\n\t\t\r\n\t\tif (i < (cells - width) && i != 0) {\r\n\t\t\tif (board[i + width + 1].status == \"cell alive\" \r\n\t\t\t\t|| board[i + width + 1].status == \"cell alive old\") {\r\n\t\t\t\tcount++;\r\n\t\t\t\t//console.log(status + ' 4 lower right for: ' + i + ' cell: ' + (i + width + 1));\r\n\t\t\t}\r\n\t\t} \r\n\r\n\t}\r\n\r\n\tif (borderCell == 0) {\r\n\t\tif (board[i - width].status == \"cell alive\" \r\n\t\t\t|| board[i - width].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' non-border -- upper center for: ' + i);\r\n\t\t}\r\n\t\tif (board[i - width - 1].status == \"cell alive\" \r\n\t\t\t|| board[i - width - 1].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' non-border -- upper left for: ' + i);\r\n\t\t}\r\n\t\tif (board[i - width + 1].status == \"cell alive\" \r\n\t\t\t|| board[i - width + 1].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' non-border -- upper right for: ' + i);\r\n\t\t}\r\n\t\tif (board[i - 1].status == \"cell alive\" \r\n\t\t\t|| board[i - 1].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' non-border -- left for: ' + i);\r\n\t\t}\r\n\t\tif (board[i + 1].status == \"cell alive\" \r\n\t\t\t|| board[i + 1].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' non-border -- right for: ' + i);\r\n\t\t}\r\n\t\tif (board[i + width].status == \"cell alive\" \r\n\t\t\t|| board[i + width].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' non-border -- lower center for: ' + i);\r\n\t\t}\r\n\t\tif (board[i + width - 1].status == \"cell alive\" \r\n\t\t\t|| board[i + width - 1].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' non-border -- lower left for: ' + i);\r\n\t\t}\r\n\t\tif (board[i + width + 1].status == \"cell alive\" \r\n\t\t\t|| board[i + width + 1].status == \"cell alive old\") {\r\n\t\t\tcount++;\r\n\t\t\t//console.log(status + ' non-border -- lower right for: ' + i);\r\n\t\t}\r\n\t}\r\n\treturn count;\r\n};\r\n\r\nfunction initialSet() {\r\n\t//populates the board with random living initial cells\r\n  \r\n\tfor (var i = 0; i < cells; i++) {\r\n\t\tvar schrodingersCell = Math.floor(Math.random() * 2);\r\n\t\tif (schrodingersCell === 0) {\r\n\t\t\tboard[i] = {id: i, status: \"cell alive old\"};\r\n\t\t} else {\r\n\t\t\tboard[i] = {id: i, status: \"cell dead\"};\r\n\t\t}\r\n\t}\r\n};"],"sourceRoot":"/source/"}